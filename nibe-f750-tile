/**
 *  Nibe F750
 *
 *  Copyright 2016 Petter Arnqvist Eriksson
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Nibe F750", namespace: "arnqvist", author: "Petter Arnqvist Erikssson") {
		capability "Polling"
		capability "Refresh"
        capability "Temperature Measurement"
        capability "Power Meter"
        command "setParameters"
        attribute "fan_speed", "number"
       	attribute "water_temp", "number"
        attribute "outdoor_temp", "number"
	}

tiles(scale:2){
	multiAttributeTile(name:"temperature", type:"generic", width:6, height:4) {
    	tileAttribute("device.temperature", key: "PRIMARY_CONTROL") {
			attributeState("default", label:'${currentValue}°',
				backgroundColors:[
                	[value: 18, color: "#4E96F4"],
					[value: 19, color: "#5EB1CD"],
					[value: 20, color: "#6ECCA6"],
					[value: 21, color: "#7FE87F"],
					[value: 22, color: "#A2C67F"],
                    [value: 23, color: "#C5A47F"],
                    [value: 24, color: "#E8837F"]
                               ])
  			}
  			tileAttribute("device.water_temp", key: "SECONDARY_CONTROL") {
    			attributeState("default", icon:"http://privat.bahnhof.se/wb214683/smartthings/icons/bath6-icn@3x.png", label:'${currentValue}°', unit:"C")
  			}
        }

        standardTile("outdoor_temp", "device.outdoor_temp", width: 1, height: 1, decoration: "flat") {
			state("default", label: '${currentValue}°', unit:"C", icon: "st.Weather.weather11")
	    }

        standardTile("fan_speed", "device.fan_speed", width: 1, height: 1, decoration: "flat") {
			state("default", label: '${currentValue}%', unit:"%", icon: "st.Appliances.appliances11")
	    }

        standardTile("power", "device.power", width: 1, height: 1, decoration: "flat") {
			state("default", label: '${currentValue}kW', unit:"kW", icon: "http://privat.bahnhof.se/wb214683/smartthings/icons/electrical_addition-icn@256.png")
	    }

		standardTile("refresh", "device.weather", inactiveLabel: false, width: 1, height: 1, decoration: "flat", wordWrap: true) {
			state "default", label: "", action: "refresh", icon:"st.secondary.refresh"
		}

		main(["temperature"])
		details(["temperature", "water_temp", "outdoor_temp", "fan_speed", "power", "refresh"])}
}
def parse(String description) {}

def poll() {
	def steps = parent.getIndoorTemp()

    	if(steps) {
    		log.debug "Indoor temperature: ${steps}"
    		sendEvent("name":"temperature", "value":steps)

    	} else {
    		log.debug "No data available"
    	}

    def outdoor_temp = parent.getOutdoorTemp()

		if(outdoor_temp) {
    		log.debug "Outdoor temperature: ${outdoor_temp}"
    		sendEvent("name":"outdoor_temp", "value":outdoor_temp)

    	} else {
    		log.debug "No data available"
    	}

    def water_temp = parent.getWaterTemp()

    	if(water_temp) {
    		log.debug "Water temperature: ${water_temp}"
    		sendEvent("name":"water_temp", "value":water_temp)

    	} else {
    		log.debug "No data available"
    	}

	def fan_speed = parent.getFanSpeed()

    	if(fan_speed) {
    		log.debug "Fan Speed: ${fan_speed}"
    		sendEvent("name":"fan_speed", "value":fan_speed)

    	} else {
    		log.debug "No data available"
    	}

	def power = parent.getAddition()

		if(power) {
    		log.debug "Addition: ${power}"
    		sendEvent("name":"power", "value":power)

    	} else {
    		log.debug "No data available"
    	}
}

/*def setParameters(indoorTemp) {
    		log.debug "KOLLA HAR DA: ${indoorTemp}"
    	}*/


def refresh() {
    poll()
}